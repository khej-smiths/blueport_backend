name: Deploy to Server on dev push

on:
  push:
    branches:
      - dev # dev 브랜치에 푸시될 때만 워크플로우 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # GitHub Actions에서 사용할 러너 환경

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3 # 현재 저장소의 코드를 가져옴

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # 다중 플랫폼 빌드를 위한 Buildx 설정

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 # 도커 허브 로그인
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # GitHub Secrets에 저장된 도커 ID
          password: ${{ secrets.DOCKER_PASSWORD }} # GitHub Secrets에 저장된 도커 비밀번호

      - name: Build and push Docker image
        uses: docker/build-push-action@v5 # 도커 이미지를 빌드하고 푸시
        with:
          context: . # 현재 디렉토리를 기준으로 빌드
          push: true # 도커 허브에 이미지 푸시
          tags: ${{ secrets.DOCKER_USERNAME }}/my-app:dev # 이미지 태그 지정

      - name: Deploy on remote server via SSH
        uses: appleboy/ssh-action@v1.0.3 # 원격 서버에 SSH로 접속하여 명령 실행
        with:
          host: ${{ secrets.REMOTE_HOST }} # 원격 서버 IP 또는 도메인
          username: ${{ secrets.REMOTE_USER }} # SSH 접속 유저명
          key: ${{ secrets.SSH_PRIVATE_KEY }} # 개인 키 (서버에 공개 키 등록 필요)
          script: |
            cd ~/my-app  # 서버에서 docker-compose.yml이 있는 디렉토리로 이동
            git pull origin dev  # 최신 dev 브랜치 코드 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:dev  # 최신 도커 이미지 가져오기
            docker compose down  # 기존 컨테이너 중지 및 정리
            docker compose up -d  # 새 이미지 기반으로 컨테이너 실행
